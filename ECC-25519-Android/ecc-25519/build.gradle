apply plugin: 'com.android.model.library'
apply from: '../../build-config/gradle-quality.gradle'

def jniCompileEnabled = true
def jniLibName = 'ed25519_android'

model {
    android {
        compileSdkVersion = rootProject.ext.compileSdkVersion
        buildToolsVersion = rootProject.ext.buildToolsVersion

        defaultConfig {
            minSdkVersion.apiLevel = rootProject.ext.minSdkVersion
            targetSdkVersion.apiLevel = rootProject.ext.targetSdkVersion
            versionCode = 1
            versionName = "1.0"

            buildConfigFields {
                create() {
                    type "java.lang.String"
                    name "JNI_LIB"
                    value "\"$jniLibName\""
                }
            }
        }

        compileOptions.with {
            sourceCompatibility = JavaVersion.VERSION_1_7
            targetCompatibility = JavaVersion.VERSION_1_7
        }

        if (jniCompileEnabled) {
            ndk {
                moduleName = jniLibName

                toolchain = 'clang'
                cppFlags.addAll(['-std=c++11', '-Werror', '-Wall', '-fno-exceptions', '-fno-rtti'])

                ldLibs.addAll(['log'])
                ldFlags.addAll(['-ljnigraphics'])

                //abiFilters.addAll(['armeabi-v7a'])
            }

            abis {
                create('armeabi-v7a') {
                    cppFlags.addAll(['-mhard-float', '-D_NDK_MATH_NO_SOFTFP=1', '-mfloat-abi=hard'])
                    ldLibs.add('m_hard')
                    ldFlags.add('-Wl,--no-warn-mismatch')
                }
            }

        } else {
            sources {
                main {
                    jniLibs {
                        source {
                            srcDirs += 'src/main/jni-precompiled'
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    androidTestCompile 'com.squareup.assertj:assertj-android:1.1.1'
}

task(preCompileLib, type : Copy) {
    dependsOn assemble
    into 'src/main/jni-precompiled'
    from 'build/intermediates/binaries/release/lib'
}

apply from: '../../build-config/gradle-push.gradle'